--Insert Value in Database
Insert into ARTISTS VALUES ('SOAOCAG12A6D4FA89X');
Insert into MUSICTRACK 
VALUES('TRARAAG128F42437FX', 'Thinking Out Loud', 'SOAOCAG12A6D4FA89X', 'X By Sheeran', 'SOAOCAG12A6D4FA89X', '69ee3720-a7cb-4402-b48d-a02c366f2bcx', 'Ed Sheeran', '232.48934', '8.1E-01','8.8E-01', '2014'); 
--SEARCH BOX
--search by song name
SELECT TITLE AS SONG_NAME, RELEASE AS ALBUM, ARTIST_NAME FROM MUSICTRACK
WHERE REGEXP_LIKE(TITLE, 'top', 'i');
--search by artist name
SELECT TITLE AS SONG_NAME, RELEASE AS ALBUM, ARTIST_NAME, FLOOR(DURATION/60) AS DURATION_MINUTE, FLOOR((DURATION/60 - FLOOR(DURATION/60))*60) AS DURATION_SECOND, YEAR AS RELEASE_YEAR
FROM MUSICTRACK
WHERE REGEXP_LIKE(ARTIST_NAME, 'THE SKABS', 'i');
--search by genre and find artist name (2 tables)
SELECT DISTINCT ARTIST_NAME FROM 
(SELECT DISTINCT MUSICTRACK.ARTIST_NAME FROM HAS_TABLE H, MUSICTRACK WHERE REGEXP_LIKE(H.TAGNAME, 'DEATH METAL', 'i') AND MUSICTRACK.ARTIST_ID = H.ARTIST_ID) UNION
(SELECT DISTINCT MUSICTRACK.ARTIST_NAME FROM OWES_TABLE O, MUSICTRACK WHERE REGEXP_LIKE(O.TAGNAME, 'DEATH METAL', 'i') AND MUSICTRACK.ARTIST_ID = O.ARTIST_ID)
;
--SEARCH BY ALBUM NAME
SELECT TITLE AS SONG_NAME, RELEASE AS ALBUM, ARTIST_NAME FROM MUSICTRACK
WHERE REGEXP_LIKE(RELEASE, 'NIGHT MOON', 'i');
--SEARCH BY TAG AND FIND ARTIST NAME(2 TABLE UNION)
SELECT DISTINCT ARTIST_NAME FROM 
(SELECT DISTINCT MUSICTRACK.ARTIST_NAME FROM HAS_TABLE H, MUSICTRACK WHERE REGEXP_LIKE(H.TAGNAME, 'CHINESE', 'i') AND MUSICTRACK.ARTIST_ID = H.ARTIST_ID) UNION
(SELECT DISTINCT MUSICTRACK.ARTIST_NAME FROM OWES_TABLE O, MUSICTRACK WHERE REGEXP_LIKE(O.TAGNAME, 'CHINESE', 'i') AND MUSICTRACK.ARTIST_ID = O.ARTIST_ID);
--TOP BAR FUNCTION
--ARTIST DISPLAY ALL ARTIST INFO
SELECT M.ARTIST_NAME, M.TITLE, M.RELEASE,ROUND(M.ARTIST_FAMILIARITY, 2)*100 AS POP_MARK, ROUND(M.ARTIST_HOTNESS, 2)*100 AS HIT_INDEX FROM MUSICTRACK M;
--MUSIC tag, DISPLAY ALL THE tag
SELECT * FROM MUSICBRAINZTAG;
--MUSIC genre, DISPLAY ALL THE genre
SELECT * FROM ECHONESTTAG;
--SEARCH ARTIST NAME TO FIND THE TAG (TWO TABLE DISPLAY)
SELECT DISTINCT H.TAGNAME AS TAG1, M.ARTIST_NAME FROM ARTISTS A, HAS_TABLE H, MUSICTRACK M
WHERE A.ARTIST_ID = H.ARTIST_ID AND M.ARTIST_ID = A.ARTIST_ID AND REGEXP_LIKE(ARTIST_NAME, 'ADA', 'i');

SELECT DISTINCT H.TAGNAME AS TAG1, M.ARTIST_NAME FROM ARTISTS A, HAS_TABLE H, MUSICTRACK M
WHERE A.ARTIST_ID = H.ARTIST_ID AND M.ARTIST_ID = A.ARTIST_ID AND REGEXP_LIKE(ARTIST_NAME, 'FAYE ADAMS', 'i');
--TRENDING NEWBIES (RANDOM VENDING HIGH HOT LOW FA)(Li)
SELECT SONG_NAME, ALBUM, ARTIST_NAME FROM
(
SELECT * FROM (
SELECT SYS.DBMS_RANDOM.VALUE, TITLE AS SONG_NAME, RELEASE AS ALBUM, ARTIST_NAME, ARTIST_HOTNESS AS HOT_INDEX, ARTIST_FAMILIARITY AS POPULAR_INDEX FROM MUSICTRACK
WHERE ARTIST_HOTNESS > 0.45 AND  ARTIST_FAMILIARITY < 0.60
ORDER BY SYS.DBMS_RANDOM.VALUE)
WHERE ROWNUM <= 15
);
--TOP ARTIST (FA RANK)(LI)
select artist_name from( 
select artist_name, max(ARTIST_FAMILIARITY) as familiar from MUSICTRACK join (
select artist_id as newID, minNameLen from (
select ARTIST_ID, max(ARTIST_FAMILIARITY) as maxFamiliar, min(length(artist_name)) as minNameLen
from musictrack group by ARTIST_ID order by maxFamiliar desc) where rownum <=10) 
on MUSICTRACK.artist_id = newID and length(artist_name) = minNameLen
group by artist_name order by familiar desc);
--TOP TRACK (HOT RANK)
SELECT DISTINCT * FROM (
SELECT TITLE, RELEASE, ROUND(ARTIST_HOTNESS, 2) * 100 AS HOT_MARK FROM MUSICTRACK)
ORDER BY HOT_MARK DESC;
--TOP GENRE (FIND TAG THAT BELONGS TO THOSE HOTTEST SINGER)
select tagname as genreType from(
select tagname, max(artist_hotness) from MUSICTRACK join OWES_TABLE
on MUSICTRACK.ARTIST_ID = OWES_TABLE.ARTIST_ID
group by tagname order by max(artist_hotness) desc)
where rownum <= 10;
--LATEST TRACK (DISPLAY LATEST RELEASE)
select title, release, year from musictrack join (
select track_id as theID, SYS.DBMS_RANDOM.VALUE from (
select track_id, year from musictrack where year <> '0' order by year desc)
where rownum <= 20 order by 2) on musictrack.track_id = theID;
--RECOMMENDATION OF ARTISTS, GIVE A NAME, PROVIDE THE SIMILAR ARTIST
SELECT TAR_NAME AS MUSICIAN, SIMI_NAME AS RECO, TITLE AS SONG_NAME, RELEASE AS ALBUM FROM MUSICTRACK, 
(
SELECT DISTINCT SIMI.SIMI_NAME, M.ARTIST_NAME AS TAR_NAME, SIMI.SIMI_ID FROM
(
SELECT DISTINCT ARTIST_NAME AS SIMI_NAME, SIMILARITY.SIMILAR_ARTIST_ID AS SIMI_ID, SIMILARITY.TARGET_ARTIST_ID AS TAR_ID
FROM MUSICTRACK, SIMILARITY WHERE MUSICTRACK.ARTIST_ID = SIMILARITY.SIMILAR_ARTIST_ID AND SIMILARITY.TARGET_ARTIST_ID IN (
SELECT DISTINCT ARTIST_ID FROM MUSICTRACK
WHERE REGEXP_LIKE(ARTIST_NAME, 'Justin Timberlake', 'i'))
) SIMI ,
MUSICTRACK M
WHERE M.ARTIST_ID = SIMI.TAR_ID
) TMP
WHERE TMP.SIMI_ID = MUSICTRACK.ARTIST_ID
;
--SONG DISTRIBUTION BY EACH YEAR:
SELECT COUNT(RELEASE), YEAR FROM MUSICTRACK
GROUP BY YEAR
HAVING YEAR != 0
ORDER BY YEAR;
--famehall
SELECT Y1 , NAME1, ROUND(MAX_HOT, 2)*100, NAME2, ROUND(MAX_FA, 2)*100 FROM
(
SELECT DISTINCT Z.YEAR Y1, Z.MAX_HOT, M.NAME AS NAME1 FROM (
SELECT MAX(ARTIST_HOTNESS) AS MAX_HOT, YEAR
FROM MUSICTRACK
GROUP BY YEAR
HAVING YEAR != 0
ORDER BY YEAR) Z, 
(SELECT DISTINCT ARTIST_NAME AS NAME, ARTIST_HOTNESS AS HOT , ARTIST_ID AS ID FROM MUSICTRACK) M,
(SELECT MIN(LENGTH(ARTIST_NAME)) AS MINLEN, MUSICTRACK.ARTIST_ID AS ID
FROM MUSICTRACK
GROUP BY MUSICTRACK.ARTIST_ID) LEN
WHERE M.HOT = Z.MAX_HOT AND LEN.MINLEN = LENGTH(M.NAME) AND LEN.ID = M.ID
ORDER BY YEAR DESC
)
INNER JOIN
(
SELECT DISTINCT Z.YEAR Y2, Z.MAX_FA, M.NAME AS NAME2 FROM (
SELECT MAX(ARTIST_FAMILIARITY) AS MAX_FA, YEAR
FROM MUSICTRACK
GROUP BY YEAR
HAVING YEAR != 0
ORDER BY YEAR) Z, 
(SELECT DISTINCT ARTIST_NAME AS NAME, ARTIST_FAMILIARITY AS FA , ARTIST_ID AS ID FROM MUSICTRACK) M,
(SELECT MIN(LENGTH(ARTIST_NAME)) AS MINLEN, MUSICTRACK.ARTIST_ID AS ID
FROM MUSICTRACK
GROUP BY MUSICTRACK.ARTIST_ID) LEN
WHERE M.FA = Z.MAX_FA AND LEN.MINLEN = LENGTH(M.NAME) AND LEN.ID = M.ID
ORDER BY YEAR DESC
)
ON Y1 = Y2;
--EACH YEAR'S HOTTEST MUSICIAN!
SELECT DISTINCT Z.YEAR, Z.MAX_HOT, M.NAME FROM (
SELECT MAX(ARTIST_HOTNESS) AS MAX_HOT, YEAR
FROM MUSICTRACK
GROUP BY YEAR
HAVING YEAR != 0
ORDER BY YEAR) Z, 
(SELECT DISTINCT ARTIST_NAME AS NAME, ARTIST_HOTNESS AS HOT , ARTIST_ID AS ID FROM MUSICTRACK) M,
(SELECT MIN(LENGTH(ARTIST_NAME)) AS MINLEN, MUSICTRACK.ARTIST_ID AS ID
FROM MUSICTRACK
GROUP BY MUSICTRACK.ARTIST_ID) LEN
WHERE M.HOT = Z.MAX_HOT AND LEN.MINLEN = LENGTH(M.NAME) AND LEN.ID = M.ID
ORDER BY YEAR;
--EACH YEAR'S POPULAR MUSICIAN!
SELECT DISTINCT Z.YEAR, Z.MAX_FA, M.NAME FROM (
SELECT MAX(ARTIST_FAMILIARITY) AS MAX_FA, YEAR
FROM MUSICTRACK
GROUP BY YEAR
HAVING YEAR != 0
ORDER BY YEAR) Z, 
(SELECT DISTINCT ARTIST_NAME AS NAME, ARTIST_FAMILIARITY AS FA , ARTIST_ID AS ID FROM MUSICTRACK) M,
(SELECT MIN(LENGTH(ARTIST_NAME)) AS MINLEN, MUSICTRACK.ARTIST_ID AS ID
FROM MUSICTRACK
GROUP BY MUSICTRACK.ARTIST_ID) LEN
WHERE M.FA = Z.MAX_FA AND LEN.MINLEN = LENGTH(M.NAME) AND LEN.ID = M.ID
ORDER BY YEAR;
--MOST PRODUCTIVE MUSICIAN!
SELECT DISTINCT AMOUNT, MUSICTRACK.ARTIST_NAME FROM (
SELECT AID, AMOUNT, MIN(STR_LEN) MIN_LEN FROM 
(
SELECT DISTINCT AID, AMOUNT, ARTIST_NAME , length(MUSICTRACK.ARTIST_NAME) AS STR_LEN FROM MUSICTRACK, (
SELECT COUNT(TRACK_ID) AS AMOUNT, ARTIST_ID AS AID FROM MUSICTRACK
GROUP BY ARTIST_ID
)
WHERE AID = MUSICTRACK.ARTIST_ID
)
GROUP BY AID, AMOUNT
), MUSICTRACK
WHERE MUSICTRACK.ARTIST_ID = AID AND length(MUSICTRACK.ARTIST_NAME) = MIN_LEN AND AMOUNT >= 8
ORDER BY AMOUNT DESC
;
--STATISTICAL STUDY/BOTTOM SHOWING
--OUR DATABASE HAS INFO FOR XXX SONGS!
SELECT COUNT(SONG_ID) FROM MUSICTRACK;
--OUR DATABASE HAS INFO FOR XXX ALBUMS!
SELECT COUNT(RELEASE) FROM MUSICTRACK;
SELECT COUNT(*) FROM MUSICTRACK;
--OUR DATABASE HAS RECORDS FOR XXX SINGERS!
SELECT COUNT(*) FROM ARTISTS;
--OUR VIGOROUS COMMUNITY CONTRIBUTES TO XXX TAGS FOR DIVERSIFIED MUSIC!
--AND AN CONNECTION OF MUSICIAN BASED ON THE CHOICE OF AUDIENCE!
SELECT COUNT(*) FROM SIMILARITY;
--97493
SELECT COUNT(*) FROM HAS_TABLE;
--3809
SELECT COUNT(*) FROM OWES_TABLE;
--3502
SELECT COUNT(*) FROM ECHONESTTAG;
--726
SELECT COUNT(*) FROM MUSICBRAINZTAG;